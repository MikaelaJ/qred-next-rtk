// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
/* import { UsersApiResponse } from "@/models/interface"; */

interface Geo {
  lat: string;
  lng: string;
}

interface Address {
  street: string;
  suite: string;
  city: string;
  zipcode: string;
  geo: Geo;
}

interface Company {
  name: string;
  catchPhrase: string;
  bs: string;
}

export interface UsersApiResponse {
  id: number;
  name: string;
  username: string;
  email: string;
  address: Address;
  phone: string;
  website: string;
  company: Company;
}

// Define a service using a base URL and expected endpoints
export const usersApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://jsonplaceholder.typicode.com/users" }),
  reducerPath: "usersApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["User"],
  endpoints: (builder) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getUsersById: builder.query<UsersApiResponse, number>({
      query: (id) => `users/${id}`,
      providesTags: (result, error, id) => [{ type: "User", id }],
    }),
    /* getAllUsers: builder.query<UsersApiResponse[], void>({
      query: () => 'users',
      providesTags: ["User"],
    }), */
    getAllUsers: builder.query<UsersApiResponse[], number>({
      query: (limit = 100) => `?limit=${limit}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "User", id }],
    }),
  })
});

// Hooks are auto-generated by RTK-Query
// Same as `usersApiSlice.endpoints.getUsers.useQuery`
export const { useGetUsersByIdQuery, useGetAllUsersQuery } = usersApiSlice;
